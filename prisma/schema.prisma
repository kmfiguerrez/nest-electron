// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  userId                String                 @id @default(cuid()) @map("user_id")
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  // Password is optional because Oauth is also used which doesn't require
  // password.
  password              String?
  role                  UserRole               @default(USER)
  image                 String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt             DateTime               @updatedAt @map("updated_at") @db.Timestamptz()

  employeeId String   @unique @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: NoAction)

  accounts              Account[]

  @@map("users")
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}


model TwoFactorToken {
  id      String   @id @default(cuid()) @map("two_factor_token_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_token")
}


model TwoFactorConfirmation {
  id     String @id @default(cuid()) @map("two_factor_confirmation_id")
  userId String @unique
  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("two_factor_confirmation")
}


enum UserRole {
  ADMIN
  USER
}


enum Gender {
  MALE
  FEMALE
}


model Employee {
  employeeId     String   @id @map("employee_id")
  birthDate      DateTime @map("birth_date") @db.Date
  firstName      String   @map("first_name") @db.VarChar(30)
  lastName       String   @map("last_name") @db.VarChar(30)
  email          String   @unique() @db.VarChar(30)
  gender         Gender
  status     String?  @db.VarChar(15) 
  department String?  @db.VarChar(30) 
  title      String?  @db.VarChar(30) 
  hireDate       DateTime @map("hire_date") @db.Date
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  user       User?
  modelDepartment Department? @relation(fields: [department], references: [name], onDelete: SetNull, onUpdate: SetNull)
  modeltitle      Title?      @relation(fields: [title], references: [name], onDelete: SetNull, onUpdate: SetNull)
  modelstatus     Status?     @relation(fields: [status], references: [name], onDelete: SetNull, onUpdate: SetNull)

  @@map("employees")
}


model Status {
  statusId Int @id @default(autoincrement()) @map("status_id")
  name String @db.VarChar(15) @unique

  employee Employee[]

  @@map("status")
}


model Department {
  departmentId Int      @id @default(autoincrement()) @map("department_id")
  name         String   @unique @db.VarChar(30)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  employee Employee[]

  @@map("departments")
}


model Title {
  titleId   Int      @id @default(autoincrement()) @map("title_id")
  name      String   @unique @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  employee Employee[]

  @@map("titles")
}
